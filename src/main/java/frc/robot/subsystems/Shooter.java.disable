package frc.robot.subsystems;

import com.revrobotics.CANSparkMax;
import com.revrobotics.RelativeEncoder;

import edu.wpi.first.wpilibj2.command.SubsystemBase;
import frc.robot.Constants.ShooterConstants;
import frc.robot.GlobalVariables;

public class Shooter extends SubsystemBase{

    private final CANSparkMax leftMotor;
    private final CANSparkMax rightMotor;

    private final RelativeEncoder leftMotorEncoder;
    private final RelativeEncoder rightMotorEncoder;

    private final LEDSubsystem ledSubsystem;

    public boolean ledIdle;

    public Shooter(LEDSubsystem m_LedSubsystem) {
        ledSubsystem = m_LedSubsystem;

        leftMotor = new CANSparkMax(ShooterConstants.kShooterMotorLeftId, CANSparkMax.MotorType.kBrushless);
        rightMotor = new CANSparkMax(ShooterConstants.kShooterMotorRightId, CANSparkMax.MotorType.kBrushless);

        leftMotor.setInverted(ShooterConstants.kShooterMotorLeftReversed);
        rightMotor.setInverted(ShooterConstants.kShooterMotorRightReversed);

        leftMotorEncoder = leftMotor.getEncoder();
        rightMotorEncoder = rightMotor.getEncoder();

        leftMotorEncoder.setVelocityConversionFactor(ShooterConstants.kShooterMotorRPMtoPercentage);
        rightMotorEncoder.setVelocityConversionFactor(ShooterConstants.kShooterMotorRPMtoPercentage);

        ledIdle = true;
    }

    public void setShooterSpeed() {
        leftMotor.set(ShooterConstants.kShooterMotorLeftSpeed);
        rightMotor.set(ShooterConstants.kShooterMotorRightSpeed);
        while (leftMotorEncoder.getVelocity() < ShooterConstants.kShooterMotorLeftSpeed && rightMotorEncoder.getVelocity() < ShooterConstants.kShooterMotorRightSpeed) {
            leftMotor.set(ShooterConstants.kShooterMotorLeftSpeed);
            rightMotor.set(ShooterConstants.kShooterMotorRightSpeed);
            
            ledIdle = false;
            ledSubsystem.rainbowMode = false;
            ledSubsystem.setColor(0, 0, 255);
        }
        ledSubsystem.setColor(0, 255, 0);
    }

    public void stopShooter() {
        leftMotor.set(0);
        rightMotor.set(0);
        ledIdle = true;
    }

    @Override
    public void periodic() {
        if (ledIdle) {
            if (GlobalVariables.getInstance().extenderFull) {
                ledSubsystem.rainbowMode = false;
                ledSubsystem.setColor(222, 49, 0);
            } else {
                ledSubsystem.rainbowMode = true;
            }
        } else {
            ledSubsystem.rainbowMode = false;
            ledSubsystem.setColor(0, 0, 0);
        }
    }

}
